name: Update Submodules

on:
  workflow_dispatch:

jobs:
  update-submodules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout meta repo with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Prepare environment
        run: |
          git config user.name "Meta Repo Bot"
          git config user.email "meta-bot@pydong.org"

      - name: Fetch latest submodule commits
        run: |
          git submodule foreach --quiet 'git fetch origin master'

      - name: Get last recorded commit for submodules in meta repo
        id: last-sha
        run: |
          for sub in $(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'); do
            sha=$(git ls-tree HEAD $sub | awk '{ print $3 }')
            echo "$sub=$sha"
          done > submodules-shas.txt
          cat submodules-shas.txt
          echo "::set-output name=submodules::$(cat submodules-shas.txt | jq -R -s -c 'split("\n")[:-1] | map(split("=") | {(.[0]): .[1]}) | add')"

      - name: Process submodules commits
        id: process
        run: |
          echo "[] " > commits.json
          updated=0
          while IFS='=' read -r subpath lastsha; do
            echo "Processing $subpath, last recorded sha $lastsha"
            # Get new commits in submodule master after last recorded sha
            mapfile -t new_commits < <(git -C "$subpath" rev-list --reverse --ancestry-path $lastsha..origin/master 2>/dev/null || true)
            if [ ${#new_commits[@]} -eq 0 ]; then
              echo "No new commits in $subpath"
              continue
            fi
            for commit_sha in "${new_commits[@]}"; do
              echo "New commit $commit_sha in $subpath"
              # Update submodule pointer to that commit
              git submodule update --remote -- "$subpath"
              git -C "$subpath" fetch origin master
              git -C "$subpath" checkout "$commit_sha"

              # Get commit info
              author_name=$(git -C "$subpath" show -s --format='%an' $commit_sha)
              author_email=$(git -C "$subpath" show -s --format='%ae' $commit_sha)
              author_date=$(git -C "$subpath" show -s --format='%aI' $commit_sha)
              commit_msg=$(git -C "$subpath" show -s --format='%B' $commit_sha)

              # Update the submodule pointer to this commit
              git add "$subpath"

              # Commit spoofing original author
              GIT_AUTHOR_NAME="$author_name" \
              GIT_AUTHOR_EMAIL="$author_email" \
              GIT_AUTHOR_DATE="$author_date" \
              GIT_COMMITTER_NAME="$author_name" \
              GIT_COMMITTER_EMAIL="$author_email" \
              GIT_COMMITTER_DATE="$author_date" \
                git commit -m "$commit_msg"

              updated=1
            done
          done < submodules-shas.txt

          echo "::set-output name=updated::$updated"

      - name: Push changes
        if: steps.process.outputs.updated == '1'
        uses: EndBug/add-and-commit@v9
        with:
          push: true
          push_branch: master
        env:
          GITHUB_TOKEN: ${{ secrets.UPDATE_TOKEN }}


      - name: No updates detected
        if: steps.process.outputs.updated != '1'
        run: echo "No new submodule commits to update."
